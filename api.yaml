openapi: 3.0.0

info:
    title: PlantBuddy Server
    description: The backend for PlantBuddy.
    version: 1.0.0

servers:
    - url: http://localhost:5000/v1
      description: Local server

paths:
    /sensor-data:
        get:
            summary: Returns sensor data
            description: Returns sensor data.
            operationId: getSensorData

            parameters:
                - name: sensor
                  in: query
                  description: Type of the sensor.
                  required: true
                  schema:
                      type: string
                      example: "humidity"

                - name: plant
                  in: query
                  description: ID of the plant
                  required: true
                  schema:
                      type: integer
                      example: 1

                - name: from
                  in: query
                  description: Start of the time range. Default to 24 hours ago.
                  required: false
                  schema:
                      type: string
                      format: date-time

                - name: to
                  in: query
                  description: End of the time range. Default to now.
                  required: false
                  schema:
                      type: string
                      format: date-time

            responses:
                "200":
                    description: An array of sensor data
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SensorDataSet"

        post:
            summary: Adds sensor data
            description: Adds sensor data.
            operationId: addSensorData

            requestBody:
                description: Sensor data to add
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SensorDataPost"

            responses:
                "200":
                    description: Sensor data added
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SensorData"

                "400":
                    description: Invalid sensor data
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid sensor data"

    /controllers:
        get:
            summary: Returns all controller UUIDs
            description: Returns all controller UUIDs.
            operationId: getControllers

            responses:
                "200":
                    description: An array of controller UUIDs
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ControllerUUIDs"

    /controller/{uuid}:
        get:
            summary: Returns a controller
            description: Returns a controller.
            operationId: getController

            parameters:
                - name: uuid
                  in: path
                  description: UUID of the controller
                  required: true
                  schema:
                      type: string

            responses:
                "200":
                    description: A controller
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Controller"

                "404":
                    description: Controller not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Controller not found"

    /sensor-types:
        get:
            summary: Returns all sensor type IDs
            description: Returns all sensor type IDs.
            operationId: getSensorTypes

            responses:
                "200":
                    description: An array of sensor type IDs
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SensorTypes"

    /plants:
        get:
            summary: Returns all plants
            description: Returns all plants.
            operationId: getPlants

            parameters:
                - name: plantGroupId
                  in: query
                  description: ID of the plant
                  required: false
                  schema:
                      type: integer

            responses:
                "200":
                    description: An array of plants
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PlantIds"

    /plant/{id}:
        get:
            summary: Returns a plant
            description: Returns a plant.
            operationId: getPlant

            parameters:
                - name: id
                  in: path
                  description: ID of the plant
                  required: true
                  schema:
                      type: integer

            responses:
                "200":
                    description: A plant
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Plant"

                "404":
                    description: Plant not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Plant not found"

    /plant-groups:
        get:
            summary: Returns all plant groups
            description: Returns all plant groups.
            operationId: getPlantGroups

            responses:
                "200":
                    description: An array of plant groups
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PlantGroupIds"

    /plant-group/{id}:
        get:
            summary: Returns a plant group
            description: Returns a plant group.
            operationId: getPlantGroup

            parameters:
                - name: id
                  in: path
                  description: ID of the plant group
                  required: true
                  schema:
                      type: integer

            responses:
                "200":
                    description: A plant group
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PlantGroup"

                "404":
                    description: Plant group not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Plant group not found"

    /users:
        get:
            summary: Returns all users
            description: Returns all users.
            operationId: getUsers

            responses:
                "200":
                    description: An array of users
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Users"

    /user/{id}:
        get:
            summary: Returns a user
            description: Returns a user.
            operationId: getUser

            parameters:
                - name: id
                  in: path
                  description: ID of the user
                  required: true
                  schema:
                      type: integer

            responses:
                "200":
                    description: A user
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserPost"

                "404":
                    description: User not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "User not found"

        post:
            summary: Adds a user
            description: Adds a user.
            operationId: addUser

            requestBody:
                description: User to add
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserPost"

            responses:
                "200":
                    description: User added
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SafeUser"

                "400":
                    description: Invalid user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid user"

        put:
            summary: Updates a user
            description: Updates a user.
            operationId: updateUser

            parameters:
                - name: id
                  in: path
                  description: ID of the user
                  required: true
                  schema:
                      type: integer

            requestBody:
                description: User to update
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserPost"

            responses:
                "200":
                    description: User updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SafeUser"

                "400":
                    description: Invalid user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid user"

                "404":
                    description: User not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "User not found"

        delete:
            summary: Deletes a user
            description: Deletes a user.
            operationId: deleteUser

            parameters:
                - name: id
                  in: path
                  description: ID of the user
                  required: true
                  schema:
                      type: integer

            responses:
                "200":
                    description: User deleted
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SafeUser"

components:
    schemas:
        SensorData:
            type: object
            description: Data collected by a sensor.

            required:
                - "controller"
                - "sensor"
                - "value"

            properties:
                controller:
                    type: string
                    description: UUID of the micro controller that collected the data.
                    example: "fbf30c62-ce17-45fc-a596-42bc33d11758"

                sensor:
                    type: string
                    description: Type of the sensor that collected the data.
                    example: "humidity"

                value:
                    type: number
                    description: Value collected by the sensor.
                    example: 1.5

                timestamp:
                    type: string
                    format: date-time
                    description: Timestamp of the data. If not set, the time the server received the data will be used.
                    example: "2020-01-01T00:00:00.000Z"

        SensorDataSet:
            type: object
            description: Data collected by a sensor.

            required:
                - "data"

            properties:
                data:
                    type: array
                    description: An array of data collected by a micro controller.
                    items:
                        $ref: "#/components/schemas/SensorData"

        SensorDataPost:
            type: object
            description: Data collected by a sensor.

            required:
                - "data"

            properties:
                data:
                    type: array
                    description: An array of data collected by a micro controller.
                    items:
                        $ref: "#/components/schemas/SensorData"

        Controller:
            type: object
            description: A micro controller.

            required:
                - "uuid"
                - "plant"
                - "sensors"

            properties:
                uuid:
                    type: string
                    description: UUID of the micro controller.
                    example: "fbf30c62-ce17-45fc-a596-42bc33d11758"

                plant:
                    type: integer
                    description: ID of the Plant the controller monitors.
                    example: 1

                sensors:
                    type: array
                    description: An array of sensor types.
                    items:
                        type: string
                        example: ["humidity", "temperature", "nitrate"]

        ControllerUUIDs:
            type: object
            description: An array of controller UUIDs.

            required:
                - "controllers"

            properties:
                controllers:
                    type: array
                    description: An array of controller UUIDs.
                    items:
                        type: string
                        example: ["fbf30c62-ce17-45fc-a596-42bc33d11758"]

        Plant:
            type: object
            description: A plant.

            required:
                - "id"
                - "group"

            properties:
                id:
                    type: integer
                    description: ID of the plant.
                    example: 1

                description:
                    type: string
                    description: An optional description.
                    example: "The big one behind the door"

                group:
                    description: Plant group of the plant.
                    $ref: "#/components/schemas/PlantGroup"

                additionalCareTips:
                    type: array
                    description: Optional additional care tips.

                    items:
                        type: string
                        example: ["Massage every morning"]

        PlantIds:
            type: object
            description: An array of plant IDs.

            required:
                - "plants"

            properties:
                plants:
                    type: array
                    description: An array of plant IDs.
                    items:
                        type: integer
                        example: [1]

        PlantGroup:
            type: object
            description: A group of plants of the same type.

            required:
                - "id"
                - "type"
                - "ranges"

            properties:
                id:
                    type: integer
                    example: 1

                name:
                    type: string
                    description: Type of the plant group.
                    example: "Cactaceae"

                description:
                    type: string
                    description: An optional description.
                    example: "The big one behind the door"

                careTips:
                    type: array
                    description: Optional care tips.

                    items:
                        type: string
                        example:
                            - "Play Mozart music every evening"
                            - "Place in the sun"

                ranges:
                    type: array
                    description: Ranges of values to be interpreted as normal for the sensors of the plant group.

                    items:
                        $ref: "#/components/schemas/SensorRange"

        PlantGroupIds:
            type: object
            description: An array of plant group IDs.

            required:
                - "plantGroups"

            properties:
                plantGroups:
                    type: array
                    description: An array of plant group IDs.
                    items:
                        type: integer
                        example: [1]

        SensorRange:
            type: object
            description: Range of values to be interpreted as normal for a sensor.

            required:
                - "type"
                - "min"
                - "max"

            properties:
                type:
                    type: string
                    description: Type of the sensor.
                    example: "humidity"

                min:
                    type: number
                    description: Minimum value of the range (inclusive).
                    example: 20

                max:
                    type: number
                    description: Maximum value of the range (inclusive).
                    example: 80

        SensorType:
            type: object
            description: Type of sensor.

            required:
                - "name"
                - "unit"

            properties:
                name:
                    type: string
                    description: Name of the sensor type.
                    example: "humidity"

                unit:
                    type: string
                    description: Unit of the sensor type.
                    example: "percent"

        SensorTypes:
            type: object
            description: An array of sensor types.

            required:
                - "types"

            properties:
                types:
                    type: array
                    description: An array of sensor types.
                    items:
                        $ref: "#/components/schemas/SensorType"
        UserPost:
            type: object
            description: A user.
            required:
                - "id"
                - "name"
                - "password"

            properties:
                id:
                    type: integer
                    description: ID of the user.
                    example: 1

                username:
                    type: string
                    description: Username of the user.
                    example: "john"

                password:
                    type: string
                    description: Password of the user.
                    example: "password"

        SafeUser:
            type: object
            description: A user without password.
            required:
                - "id"
                - "name"

            properties:
                id:
                    type: integer
                    description: ID of the user.
                    example: 1

                username:
                    type: string
                    description: Username of the user.
                    example: "john"

        Users:
            type: object
            description: An array of user ids.
            required:
                - "users"

            properties:
                users:
                    type: array
                    description: An array of user ids.
                    items:
                        type: integer
                        example: [1]
